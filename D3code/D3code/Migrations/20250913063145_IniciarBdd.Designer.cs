// <auto-generated />
using System;
using D3code.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace D3code.Migrations
{
    [DbContext(typeof(EnerQuantumDbContext))]
    [Migration("20250913063145_IniciarBdd")]
    partial class IniciarBdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("D3code.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AreaId"));

                    b.Property<string>("GridType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AreaId");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("D3code.Models.ClimateEvent", b =>
                {
                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamptz");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<string>("ClimateCondition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("Phenomenon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("PrecipitationMm")
                        .HasColumnType("double precision");

                    b.Property<double?>("PressureHpa")
                        .HasColumnType("double precision");

                    b.Property<double?>("TempC")
                        .HasColumnType("double precision");

                    b.Property<double?>("TempMaxC")
                        .HasColumnType("double precision");

                    b.Property<double?>("TempMinC")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedMps")
                        .HasColumnType("double precision");

                    b.HasKey("StartTimestamp", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("ClimateEvents", (string)null);
                });

            modelBuilder.Entity("D3code.Models.EnergyUsage", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamptz");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<int?>("AreaId1")
                        .HasColumnType("integer");

                    b.Property<string>("Circuit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double?>("DemandMWh")
                        .HasColumnType("double precision");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("ExportMWh")
                        .HasColumnType("double precision");

                    b.Property<double?>("GenerationMWh")
                        .HasColumnType("double precision");

                    b.Property<double?>("ImportMWh")
                        .HasColumnType("double precision");

                    b.Property<double?>("LossesPct")
                        .HasColumnType("double precision");

                    b.Property<double?>("NetExchangeMWh")
                        .HasColumnType("double precision");

                    b.Property<string>("ServiceStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Timestamp", "AreaId");

                    b.HasIndex("AreaId");

                    b.HasIndex("AreaId1");

                    b.ToTable("EnergyUsage", (string)null);
                });

            modelBuilder.Entity("D3code.Models.ClimateEvent", b =>
                {
                    b.HasOne("D3code.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("D3code.Models.EnergyUsage", b =>
                {
                    b.HasOne("D3code.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D3code.Models.Area", null)
                        .WithMany("EnergyUsage")
                        .HasForeignKey("AreaId1");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("D3code.Models.Area", b =>
                {
                    b.Navigation("EnergyUsage");
                });
#pragma warning restore 612, 618
        }
    }
}
